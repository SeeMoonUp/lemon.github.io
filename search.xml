<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[开发中遇到的float double精度问题]]></title>
      <url>http://SeeMoonUp.github.io/2017/02/07/java/floatConvertInt/</url>
      <content type="html"><![CDATA[<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>javascript java中小数进行算术运算存在精度问题</p>
<ol>
<li>在js中的体现<br> <code>2.32 * 100 = 231.99999999999997</code></li>
<li>在java中的体现 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">2.32d * 100 = 231.99999999999997</div><div class="line">0.15f * 100 = 15.000001</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>说明：js中使用的为双精度，java 无论单精度或者双精度都无法避免这个问题</p>
</blockquote>
<h4 id="导致问题的原因"><a href="#导致问题的原因" class="headerlink" title="导致问题的原因"></a>导致问题的原因</h4><ol>
<li>关于二进制存储的知识<a href="http://www.cnblogs.com/helloaworld/p/5419017.html" target="_blank" rel="external">点击查看</a></li>
<li>关于十进制如何转换为二进制<a href="http://blog.csdn.net/xingtanzjr/article/details/50803832" target="_blank" rel="external">点击查看</a></li>
</ol>
<p>ps: 第一篇博文中存在一点计算问题 即8.25，用二进制的科学计数法表示为:1.00001*2^3,原文作者少写一个0</p>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>对于这个现象 目前没有解决方案，只能根据自己的业务需求，来进行灵活的变通</p>
<p>作者在进行商城设计的时候遇到的坑<br>后台可以修改订单的价格，所以需要输入一个小数保留两位有效数字即单位为元（因为开发给别人使用所以展示为元更为直观）<br>发现精度问题后，不再考虑工作人员体验问题，修改为int 避免了这个问题<br>数据库中的字段也都存储分为单位 避免精度问题</p>
<blockquote>
<p><a href="https://seemoonup.github.io/2017/02/07/java/floatConvertInt/">原文地址</a><br>未经作者允许 请勿转载，谢谢 :)</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[springMvc+token实现防止重复提交（下）]]></title>
      <url>http://SeeMoonUp.github.io/2017/01/24/java/springMvcAvoidRepeatByMemcached/</url>
      <content type="html"><![CDATA[<p>上 讲到如何利用拦截器+session实现</p>
<p>问题出现在 服务器使用tomcat集群 使用seesion来实现功能<br><img src="http://upload-images.jianshu.io/upload_images/1329783-d0fdc8d30d35b886.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="问题.png"><br>解决方案：使用memcached解决问题<br><img src="http://upload-images.jianshu.io/upload_images/1329783-a2374d03c498c03b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="方案.png"><br>上面考虑的是请求分发到不同的服务器的情况，分发到统一服务器同样适用<br>修改拦截器代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">*author:lemon</div><div class="line">*/</div><div class="line">public class AvoidDuplicateSubmissionInterceptor extends HandlerInterceptorAdapter &#123;</div><div class="line"></div><div class="line">    private static final Logger LOG = Logger.getLogger(AvoidDuplicateSubmissionInterceptor.class);</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean preHandle(HttpServletRequest request,</div><div class="line">                             HttpServletResponse response, Object handler) throws Exception &#123;</div><div class="line"></div><div class="line">        //用户唯一标识  </div><div class="line">        String openId = UserCookieUtil.getOpenIdFromCookieValue(request);</div><div class="line"></div><div class="line">        int userId = UserCookieUtil.getUserIdFromCookie(request);</div><div class="line"></div><div class="line">        String memKey = &quot;&quot;;</div><div class="line">        if (StringUtils.isNotEmpty(openId)) &#123;</div><div class="line">            memKey = &quot;_mdu&quot; + openId;</div><div class="line">        &#125; else if (userId &gt; 0) &#123;</div><div class="line">            memKey = &quot;_u&quot; + userId;</div><div class="line">        &#125;</div><div class="line">        if (StringUtils.isNotEmpty(memKey)) &#123;</div><div class="line">            HandlerMethod handlerMethod = (HandlerMethod) handler;</div><div class="line">            Method method = handlerMethod.getMethod();</div><div class="line"></div><div class="line">            AvoidDuplicateSubmission annotation = method.getAnnotation(AvoidDuplicateSubmission.class);</div><div class="line">            if (annotation != null) &#123;</div><div class="line"></div><div class="line">                String memToken = MCacheUtil.get(memKey, String.class);</div><div class="line"></div><div class="line">                boolean needSaveSession = annotation.needSaveMemToken();</div><div class="line">                if (needSaveSession) &#123;</div><div class="line">                    if (StringUtils.isEmpty(memToken)) &#123;</div><div class="line">                        MCacheUtil.add(memKey, TokenProcessor.getInstance().generateToken(memKey), 5 * 60);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                boolean needRemoveSession = annotation.needRemoveMemToken();</div><div class="line">                if (needRemoveSession) &#123;</div><div class="line">                    if (StringUtils.isEmpty(memToken)) &#123;</div><div class="line">                        LOG.warn(&quot;please don&apos;t repeat submit,[user:&quot; + memKey + &quot;,url:&quot;</div><div class="line">                                + request.getServletPath() + &quot;]&quot;);</div><div class="line">                        return false;</div><div class="line">                    &#125;</div><div class="line">                    MCacheUtil.delete(memKey);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>实现细节，详见上一篇文章<br><a href="/2017/01/24/java/springMvcAvoidRepeat/">springMvc+token实现防止重复提交（上）</a></p>
<blockquote>
<p>未经作者允许 请勿转载，谢谢 :)</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[springMvc+token实现防止重复提交(上)]]></title>
      <url>http://SeeMoonUp.github.io/2017/01/24/java/springMvcAvoidRepeat/</url>
      <content type="html"><![CDATA[<p>众所周知，在开发的过程中会出现重复提交表单的情况<br>一般的解决方案：</p>
<ol>
<li>前端点击按钮之后隐藏按钮或者置为不可点击</li>
<li>在服务端检查此用户是否提交过表单，如果提交过拒绝</li>
</ol>
<blockquote>
<p>但是问题在如果发生了金手指（用户手速特快），同时触发了两次请求，这样的话无论是前端拦截还是服务端链接都是没有效果的</p>
</blockquote>
<p>解决方案：<br>增加一层拦截，在进入页面的时候加上一个标识，此标识只能使用一次，当提交过后含有此标识的请求将不会成功</p>
<p>原理：在新建页面中Session保存token随机码，当保存时验证，通过后删除，当再次点击保存时由于服务器端的Session中已经不存在了，所有无法验证通过。</p>
<h5 id="1-新建注解："><a href="#1-新建注解：" class="headerlink" title="1. 新建注解："></a>1. 新建注解：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 防止重复提交注解，用于方法上&lt;br/&gt;</div><div class="line"> * 在新建页面方法上，设置needSaveToken()为true，此时拦截器会在Session中保存一个token，</div><div class="line"> * 同时需要在新建的页面中添加</div><div class="line"> * &lt;input type=&quot;hidden&quot; name=&quot;token&quot; value=&quot;$&#123;token&#125;&quot;&gt;</div><div class="line"> * &lt;br/&gt;</div><div class="line"> * 保存方法需要验证重复提交的，设置needRemoveToken为true</div><div class="line"> * 此时会在拦截器中验证是否重复提交</div><div class="line"> * &lt;/p&gt;</div><div class="line"> * @author: chuanli</div><div class="line"> * @date: 2013-6-27上午11:14:02</div><div class="line"> *</div><div class="line"> */</div><div class="line">@Target(ElementType.METHOD)</div><div class="line">@Retention(RetentionPolicy.RUNTIME)</div><div class="line">public @interface AvoidDuplicateSubmission &#123;</div><div class="line">    boolean needSaveToken() default false;</div><div class="line">    boolean needRemoveToken() default false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-新建拦截器"><a href="#2-新建拦截器" class="headerlink" title="2. 新建拦截器"></a>2. 新建拦截器</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 防止重复提交过滤器</div><div class="line"> * &lt;/p&gt;</div><div class="line"> *</div><div class="line"> * @author: chuanli</div><div class="line"> * @date: 2013-6-27上午11:19:05</div><div class="line"> */public class AvoidDuplicateSubmissionInterceptor extends HandlerInterceptorAdapter &#123;</div><div class="line">    private static final Logger LOG = Logger.getLogger(AvoidDuplicateSubmissionInterceptor.class);</div><div class="line"></div><div class="line">    @Overridepublic boolean preHandle(HttpServletRequest request,</div><div class="line">            HttpServletResponse response, Object handler) throws Exception &#123;</div><div class="line"></div><div class="line">        User user = UserUtil.getUser();</div><div class="line">        if (user != null) &#123;</div><div class="line">            HandlerMethod handlerMethod = (HandlerMethod) handler;</div><div class="line">            Method method = handlerMethod.getMethod();</div><div class="line"></div><div class="line">            AvoidDuplicateSubmission annotation = method.getAnnotation(AvoidDuplicateSubmission.class);</div><div class="line">            if (annotation != null) &#123;</div><div class="line">                boolean needSaveSession = annotation.needSaveToken();</div><div class="line">                if (needSaveSession) &#123;</div><div class="line">                    request.getSession(false).setAttribute(&quot;token&quot;, TokenProcessor.getInstance().generateToken());</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                boolean needRemoveSession = annotation.needRemoveToken();</div><div class="line">                if (needRemoveSession) &#123;</div><div class="line">                    if (isRepeatSubmit(request)) &#123;</div><div class="line">                        LOG.warn(&quot;please don&apos;t repeat submit,[user:&quot; + user.getUsername() + &quot;,url:&quot;</div><div class="line">                                + request.getServletPath() + &quot;]&quot;);</div><div class="line">                        return false;</div><div class="line">                    &#125;</div><div class="line">                    request.getSession(false).removeAttribute(&quot;token&quot;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private boolean isRepeatSubmit(HttpServletRequest request) &#123;</div><div class="line">        String serverToken = (String) request.getSession(false).getAttribute(&quot;token&quot;);</div><div class="line">        if (serverToken == null) &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        String clinetToken = request.getParameter(&quot;token&quot;);</div><div class="line">        if (clinetToken == null) &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        if (!serverToken.equals(clinetToken)) &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-在Spring中配置"><a href="#3-在Spring中配置" class="headerlink" title="3. 在Spring中配置"></a>3. 在Spring中配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;bean class=&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;&gt;</div><div class="line">   &lt;property name=&quot;interceptors&quot;&gt;</div><div class="line">   &lt;list&gt;</div><div class="line">       &lt;bean class=&quot;com.sohu.tv.crm.aop.UserLogInterceptor&quot;/&gt;</div><div class="line">       &lt;bean class=&quot;com.sohu.tv.crm.aop.AvoidDuplicateSubmissionInterceptor&quot;/&gt;</div><div class="line">    &lt;/list&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<h5 id="4-在相关方法中加入注解："><a href="#4-在相关方法中加入注解：" class="headerlink" title="4. 在相关方法中加入注解："></a>4. 在相关方法中加入注解：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@RequestMapping(&quot;/save&quot;)</div><div class="line">@AvoidDuplicateSubmission(needRemoveToken = true)</div><div class="line">public synchronized ModelAndView save(ExecutionUnit unit, HttpServletRequest request, HttpServletResponse response)</div><div class="line">        throws Exception &#123;</div><div class="line"></div><div class="line">@RequestMapping(&quot;/edit&quot;)</div><div class="line">@AvoidDuplicateSubmission(needSaveToken = true)</div><div class="line">public ModelAndView edit(Integer id, HttpServletRequest request) throws Exception &#123;</div></pre></td></tr></table></figure>
<h5 id="5-在新建页面中加入"><a href="#5-在新建页面中加入" class="headerlink" title="5. 在新建页面中加入"></a>5. 在新建页面中加入</h5><p><code>&lt;input type=&quot;hidden&quot; name=&quot;token&quot; value=&quot;${token}&quot;&gt;</code></p>
<p>注 在配置文件中加入上述配置 不起作用<br>解决方式：在配置文件servlet_context.xml中加入（删除原有配置文件）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;mvc:interceptors&gt;</div><div class="line">   &lt;mvc:interceptor&gt;</div><div class="line">      &lt;mvc:mapping path=&quot;/club/**&quot;/&gt;</div><div class="line">      &lt;bean class=&quot;cc.laowantong.core.interceptor.AvoidDuplicateSubmissionInterceptor&quot;/&gt;</div><div class="line">   &lt;/mvc:interceptor&gt;</div><div class="line">&lt;/mvc:interceptors&gt;</div></pre></td></tr></table></figure></p>
<p>但是这种方式对于集群（多台服务器无效）基于seesion，所以需修改，详见下一篇文章<br><a href="/2017/01/24/java/springMvcAvoidRepeatByMemcached/">springMvc+token实现防止重复提交（下）</a></p>
<p>此文章原创： <a href="https://my.oschina.net/mushui/blog/143397" target="_blank" rel="external">https://my.oschina.net/mushui/blog/143397</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[红包秒杀活动]]></title>
      <url>http://SeeMoonUp.github.io/2017/01/22/java/redpacket/</url>
      <content type="html"><![CDATA[<p>并发抢红包算法及实现</p>
<ol>
<li>如何分配红包</li>
<li>如何控制抢红包的并发（类似秒杀系统）</li>
</ol>
<hr>
<h4 id="一-如何分配红包"><a href="#一-如何分配红包" class="headerlink" title="一 如何分配红包"></a>一 如何分配红包</h4><p>分配红包的要求：``<br>a. 较为均匀，同时允许出现较大值和较小值<br>b. 不能为0<br>c. 指定红包个数和总量，可以自动分配完全<br>解决方案：</p>
<ol>
<li>较为均匀的分布，简单的伪微信红包 缺点 红包金额较为均匀</li>
<li>使用正态分布来动态实现红包的分布（作者最终采用的方案）<h5 id="第一种方案的简单实现代码"><a href="#第一种方案的简单实现代码" class="headerlink" title="第一种方案的简单实现代码"></a>第一种方案的简单实现代码</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">if(leftPacketAmount == 1)&#123;</div><div class="line">    return leftCoinAmount;</div><div class="line">&#125;</div><div class="line">int max = leftCoinAmount/leftPacketAmount * 2;</div><div class="line">Random rnd = new Random();</div><div class="line">int coin = (int)(rnd.nextDouble()*max);</div><div class="line">coin = Math.max(1, coin);</div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="第二种方案的实现代码："><a href="#第二种方案的实现代码：" class="headerlink" title="第二种方案的实现代码："></a>第二种方案的实现代码：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public int nextCoinAmount(int leftPacketAmount, int leftCoinAmount) &#123;</div><div class="line">    if (leftPacketAmount == 1) &#123;</div><div class="line">        return leftCoinAmount;</div><div class="line">    &#125;</div><div class="line">    if (leftCoinAmount &lt;= 0) &#123;</div><div class="line">        GCW_LOG.error(&quot;[redPacket] leftPacketAmount:&quot; + leftPacketAmount + &quot;,leftCoinAmount:&quot; + leftCoinAmount);</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    int coin = 0;</div><div class="line">    Random random = new Random();</div><div class="line">    double average = leftCoinAmount / leftPacketAmount;</div><div class="line">    double gaussian = random.nextGaussian();</div><div class="line">    Double d = Math.abs(average * (gaussian + 1)) + 10;    //至少分配10个金币</div><div class="line">    if (leftCoinAmount - d.intValue() &gt;= (leftPacketAmount - 1) * 10) &#123;    //剩余的金币足以分配每人100</div><div class="line">        coin = d.intValue();</div><div class="line">    &#125; else &#123;</div><div class="line">        coin = 10;</div><div class="line">    &#125;</div><div class="line">    return coin;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h4 id="二-关于红包的分配方案"><a href="#二-关于红包的分配方案" class="headerlink" title="二 关于红包的分配方案"></a>二 关于红包的分配方案</h4><ol>
<li>进入一位用户实时分配红包大小</li>
<li>预先分配好红包入库，进入用户直接分配</li>
</ol>
<p>第一种方式的劣势：对于正态分布无法阻止过大值或者最小值（可控制），最大的不足：高并发导致的leftPacketAmoutn和leftCoinAmount不正确导致计算出的结果不正确。<br>第二种方式的优势：可以预分配，达到自己想要的数据结果，高并发不存在问题<br>第二种方式的劣势：需要对数据库操作，增加库的压力，降低请求的处理速度</p>
<hr>
<h5 id="三-产品分析及设计"><a href="#三-产品分析及设计" class="headerlink" title="三 产品分析及设计"></a>三 产品分析及设计</h5><p>产品：<br>    列表页：50个视频<br>    详情页：观看视频获取口令–&gt;打开红包–&gt;输入口令–&gt;获取金币</p>
<h5 id="对于产品逻辑的实现方案："><a href="#对于产品逻辑的实现方案：" class="headerlink" title="对于产品逻辑的实现方案："></a>对于产品逻辑的实现方案：</h5><h6 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h6><ol>
<li>进入列表页</li>
<li>达到开抢时间，进入详情页</li>
<li>观看视频，获取口令，输入口令，获取金币<br>不足之处：</li>
<li>经生产环境测试：红包开抢，大量用户涌入，导致无法进入详情页，大部分用户进不去系统</li>
</ol>
<h6 id="方案二（优化方案一）"><a href="#方案二（优化方案一）" class="headerlink" title="方案二（优化方案一）"></a>方案二（优化方案一）</h6><ol>
<li>口令提前放出，在列表页添加即将开始的视频文件，可播放获取</li>
<li>可进入详情页，红包点击位置隐藏换为倒计时展示，有效的解决了开抢时间大量用户访问页面无法进入的问题</li>
</ol>
<h5 id="如何解决并发问题"><a href="#如何解决并发问题" class="headerlink" title="如何解决并发问题"></a>如何解决并发问题</h5><h6 id="方案一-1"><a href="#方案一-1" class="headerlink" title="方案一"></a>方案一</h6><ol>
<li>维护一个memCache变量（初始值为红包总量）</li>
<li>当用户输入口令进入系统，基本校验（如口令）通过，memCache.decrement（1）减少1</li>
<li>对数据库进行操作</li>
<li>如果发生操作失败情况memCache.increment(1)<br>不足之处：</li>
<li>经生产环境及jmeter压力测试 memCache在并发严重的情况下，无法保证读写一致（库的读写速度较慢），会导致问题（memCached红包总量先达到0）</li>
<li>处理数据库会存在一定量的并发压力，抢占数据库资源出现问题</li>
</ol>
<h6 id="方案二（优化方案一memCached并发问题）"><a href="#方案二（优化方案一memCached并发问题）" class="headerlink" title="方案二（优化方案一memCached并发问题）"></a>方案二（优化方案一memCached并发问题）</h6><ol>
<li>增加队列的处理方案</li>
<li>当用户输入口令，发送请求至另外一个单服务器工程（维护一个请求队列）</li>
<li>同时维护用户对应的队列处理状态</li>
<li>单服务器工程处理库的问题并维护总的红包数量 有效的解决读写一致问题，单服务器无并发问题，<br>缺点：</li>
<li>单服务器处理速度较慢</li>
</ol>
<h5 id="用户体验优化"><a href="#用户体验优化" class="headerlink" title="用户体验优化"></a>用户体验优化</h5><blockquote>
<p>当用户输入完口令，处理并未结束，提示排队人数较多，请重试<br>用户重新抢红包时，只是获取上一次请求的队列中的处理状态</p>
</blockquote>
<h5 id="页面优化"><a href="#页面优化" class="headerlink" title="页面优化"></a>页面优化</h5><blockquote>
<p>列表页大部分数据实现静态化<br>需要动态改变的信息，使用memCached缓存，定时更新</p>
</blockquote>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><blockquote>
<ol>
<li>产品逻辑注意：当开抢时，尽量避免用户刷新页面</li>
<li>对数据库的操作尽量减少，能缓存和静态化的数据就别落到库上</li>
<li>提高用户体验</li>
<li>不要过度依赖memCached</li>
</ol>
<p>未经作者允许 请勿转载，谢谢 :)</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[微信浏览器调起App]]></title>
      <url>http://SeeMoonUp.github.io/2017/01/22/fe/wechatScheme/</url>
      <content type="html"><![CDATA[<blockquote>
<p>问题：App中分享到微信的链接 如何在app中打开呢<br>目前的通用解决方案：</p>
<ul>
<li>微信点击链接 跳转应用宝 打开</li>
<li>跳转浏览器 调起app 打开链接</li>
</ul>
</blockquote>
<p>下面来详细了解一下第二种解决方案<br>分享出去的链接比如share.html<br>其中的代码为<br><code>&lt;a href=&quot;www.seemoonup.com/jump.html?schema=***&quot;&gt;</code></p>
<p>schema为app端提供的地址<br>请求发送到server之后跳转至中转页面jump.html</p>
<p>下面来分析一下jump.html的页面逻辑</p>
<ol>
<li>打开分享页 点击在app中打开,进入中转jump页</li>
<li>判断是否为wechat浏览器 </li>
<li>如果在wechat浏览器中，则诱导用户使用浏览器打开此页面</li>
<li>浏览器中打开jump页</li>
<li>使用页面js方法schema尝试调起app 调起成功直接打开，调起失败提示跳转失败</li>
</ol>
<p>逻辑流程图<br><img src="http://upload-images.jianshu.io/upload_images/1329783-b49beea93566c15d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Paste_Image.png"></p>
<p>这其中的逻辑主要集中在jump页面判断ua上面<br>其次对于如何调起schema对于ios和android以及版本的不同</p>
<blockquote>
<p>主要有两种方式：<br>frame.src = schema//嵌入frame<br>window.location=schema//url跳转</p>
</blockquote>
<p>具体实现代码根据业务需求实现</p>
<blockquote>
<p>总结:两种解决方式各有利弊，根据具体需求选用，使用应用宝就绕不开下载应用宝，使用中转方式 绕不开点击更多 使用浏览器打开<br>  适合自己的才是最好的</p>
<p>未经作者允许 请勿转载，谢谢 :)</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[jstl el js灵活使用（三种方案处理页面逻辑）]]></title>
      <url>http://SeeMoonUp.github.io/2017/01/22/java/jstl/</url>
      <content type="html"><![CDATA[<blockquote>
<p>场景描述：根据后台传入的值（value是否大于0）决定是否跳转（跳转地址vid-<em>）<br>备注：\</em>为后台传入的value</p>
</blockquote>
<hr>
<p>.解决方案：</p>
<h4 id="第一种方案：jstl"><a href="#第一种方案：jstl" class="headerlink" title="第一种方案：jstl"></a>第一种方案：jstl</h4><p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;c:choose&gt;</div><div class="line">  &lt;c:when test=&quot;$&#123;value &gt; 0&#125;&quot;&gt;</div><div class="line">    &lt;a href=&quot;vid-$&#123;value&#125;&quot; class=&quot;photo&quot; target=&quot;_blank&quot;&gt;</div><div class="line">    href</div><div class="line">    &lt;/a&gt;&lt;/c:when&gt;</div><div class="line">  &lt;c:otherwise&gt;</div><div class="line">    &lt;a href=&quot;javascript:void(0);&quot; class=&quot;photo&quot; target=&quot;_blank&quot;&gt;</div><div class="line">    href</div><div class="line">  &lt;/c:otherwise&gt;</div><div class="line">&lt;/c:choose&gt;</div></pre></td></tr></table></figure></p>
<p>使用jstl表达式来完成</p>
<hr>
<h4 id="第二种方案：el表达式-三目运算符"><a href="#第二种方案：el表达式-三目运算符" class="headerlink" title="第二种方案：el表达式+三目运算符"></a>第二种方案：el表达式+三目运算符</h4><p>很显然使用第一种方式代码很臃肿，代码量太高<br>所以考虑能否使用el表达式中的三目运算符来解决这个问题<br>代码如下<br><code>&lt;a href=&quot;${value &gt; 0 ? &#39;vid-&#39;+value : &#39;&#39;}; &quot;</code></p>
<p>发现会报错 原因是三目运算符中不支持字符串的加减，只支持数字间的逻辑运算<br>这样就比较尴尬了；</p>
<hr>
<h4 id="第三种方案：将逻辑转移到js文件当中-将videoId传入js中进行处理判断"><a href="#第三种方案：将逻辑转移到js文件当中-将videoId传入js中进行处理判断" class="headerlink" title="第三种方案：将逻辑转移到js文件当中 将videoId传入js中进行处理判断**"></a>第三种方案：将逻辑转移到js文件当中 将videoId传入js中进行处理判断**</h4><p>js代码如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function redirectUrl(value)&#123;</div><div class="line">  if(value &gt; 0) &#123;</div><div class="line">    window.location.href = &quot;vid-&quot;+value;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>jsp代码如下<br><code>&lt;a href=&quot;javascript:redirectUrl(${ value}); &quot;</code></p>
<p>使用这种方案就解决了第二种方法不能够处理的问题</p>
<blockquote>
<p>总结：有时候思路转变一下 就会得到一种比较合理的解决方案</p>
<p>未经作者允许 请勿转载，谢谢 :)</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[mysql sum 返回为null]]></title>
      <url>http://SeeMoonUp.github.io/2017/01/21/mysql/sumReturnNull/</url>
      <content type="html"><![CDATA[<h5 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h5><ol>
<li>使用mysql进行sum求和</li>
<li>java使用int类型来接收</li>
<li>当sum()where条件后没有满足的数据，返回null</li>
<li>java转换为int的时候 报错如下：<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">org.apache.ibatis.binding.BindingException: Mapper method 'getShopTotalUseProfit' (interface cc.laowantong.dao.mapper.MallOrderMapper) attempted to return null from a method with a primitive return type (int).</div><div class="line">	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:42)</div><div class="line">	at com.sun.proxy.$Proxy78.getShopTotalUseProfit(Unknown Source)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</div><div class="line">	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</div><div class="line">	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</div><div class="line">	at java.lang.reflect.Method.invoke(Method.java:498)</div></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h5><ol>
<li>使用函数coalesce(arg1,arg2,…)</li>
<li>函数解释：返回参数中第一个非空的参数</li>
<li>最终的sql为： <code>SELECT COALESCE(SUM(total),0)  FROM test_table</code></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[晴雯]]></title>
      <url>http://SeeMoonUp.github.io/2017/01/21/stone/Qingwen/</url>
      <content type="html"><![CDATA[<h3 id="关于晴雯"><a href="#关于晴雯" class="headerlink" title="关于晴雯"></a>关于晴雯</h3><h4 id="判词"><a href="#判词" class="headerlink" title="判词"></a>判词</h4><blockquote>
<p>霁月难逢，彩云易散。<br>心比天高，身为下贱。<br>风流灵巧招人怨，寿夭多因诽谤生。<br>多情公子空牵念。2</p>
</blockquote>
<h4 id="主要事迹"><a href="#主要事迹" class="headerlink" title="主要事迹"></a>主要事迹</h4><ol>
<li>病补雀金裘</li>
<li>撕扇</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用bootstrap-treeview插件实现灵活配置快递模板]]></title>
      <url>http://SeeMoonUp.github.io/2017/01/20/shipTemplate/</url>
      <content type="html"><![CDATA[<p>使用bootstrap-treeview插件实现灵活配置快递模板</p>
<h5 id="使用bootstrap-treeview插件实现灵活配置快递模板"><a href="#使用bootstrap-treeview插件实现灵活配置快递模板" class="headerlink" title="使用bootstrap-treeview插件实现灵活配置快递模板"></a>使用bootstrap-treeview插件实现灵活配置快递模板</h5><h6 id="开发条件："><a href="#开发条件：" class="headerlink" title="开发条件："></a>开发条件：</h6><p>安装bootstrap-treeview插件，具体操作见：<br><a href="http://www.bootcdn.cn/bootstrap-treeview/readme/" target="_blank" rel="external">bootstrap-treeview</a></p>
<h6 id="实现功能："><a href="#实现功能：" class="headerlink" title="实现功能："></a>实现功能：</h6><blockquote>
<p>1.一个模板可指定子模板（包含多个地区、价格等）<br>2.编辑子模板地区时，动态改变tree的地区（其他子模板选中的地区disabled,此模板之前选中的地区默认选中）<br>3.tree选择时，父级和子集的联动（如父级选中子集全部选中，取消一个子集的时候，父级也取消）<br>4.维护子模板数据（展示选中的地区格式 如（安徽、北京（昌平 回龙观）） 存储选中节点）</p>
</blockquote>
<p>其他说明</p>
<blockquote>
<p>数据源格式：[{text:’展示名称1’,nodes:[{text:’子级’}]},{text:’展示名称2’}]<br>bootstrap-trview会动态的为数据源添加nodeId,parentId这两个属性（很重要的属性），可自定义添加其他属性用来标记当前节点</p>
</blockquote>
<hr>
<p>编辑过程中维护的数据</p>
<blockquote>
<p>数组对象templates包含：<br>1.模板的名称<br>2.每个子模板对应的 价格 件数 排序<br>3.子模板的地区Id、节点id、展示名称</p>
</blockquote>
<p>实现上述数据需要维护的数组和对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">var templates = [];    //保存最终储存的数据</div><div class="line">var selectedNodeId = [];    //用来存储单个模板选择的nodeId 用于展示</div><div class="line">var editingTemplate = null;    //用于标记正在处理的是第几个地区模板</div><div class="line">var selectedAreaId = [];  //保存当前选择的地区</div><div class="line">var selectedAreaName = []; //保存当前选中的地区名称用于展示</div><div class="line">var defaultData = [];//数据源</div></pre></td></tr></table></figure></p>
<hr>
<h6 id="实现功能一"><a href="#实现功能一" class="headerlink" title="实现功能一"></a>实现功能一</h6><blockquote>
<p>一个模板指定多个子模板<br>主要是维护templates[]数组 push进入多个template即可 下面会详细讲解如何维护template</p>
</blockquote>
<hr>
<h6 id="实现功能二（动态修改tree）"><a href="#实现功能二（动态修改tree）" class="headerlink" title="实现功能二（动态修改tree）"></a>实现功能二（动态修改tree）</h6><blockquote>
<p>原理：通过维护的templates和editingTemplate 拿到当前编辑的子模板数据和其他子模板数据，将当前模板的node默认选中，其他的数据置为disabled</p>
</blockquote>
<p>编辑子模板</p>
<blockquote>
<p>uncheckAll方法：<code>$(&#39;#tree&#39;).treeview(&#39;uncheckAll&#39;, { silent: true });</code><br>disAbled方法：<code>$(&#39;#tree&#39;).treeview(&#39;disableNode&#39;, [ nodeId, { silent: true } ]);</code><br>默认选中的方法<code>$(&#39;#tree&#39;).treeview(&#39;checkNode&#39;, [ template.nodeIds[i], { silent: true } ]);</code></p>
</blockquote>
<hr>
<h6 id="实现功能三：父级和子级的联动（主要操作在点击选中和取消选中上面-来分析两种情况）"><a href="#实现功能三：父级和子级的联动（主要操作在点击选中和取消选中上面-来分析两种情况）" class="headerlink" title="实现功能三：父级和子级的联动（主要操作在点击选中和取消选中上面 来分析两种情况）"></a>实现功能三：父级和子级的联动（主要操作在点击选中和取消选中上面 来分析两种情况）</h6><p>第一种 选中</p>
<blockquote>
<p>1.选择父节点 将子节点全部选中<br>根据父节点返回的nodes得到所有的子节点 并且将子节点全部选中<br>选中的方法<code>$(&#39;#tree&#39;).treeview(&#39;checkNode&#39;, [ nodeId, { silent: true } ]);</code><br>可以封装为一个方法selectAllChildren()</p>
<p>2.如果选中的为子节点<br>判断父节点中的子节点是否全部选中如果全部选中则将父节点选中</p>
</blockquote>
<p>第二种 取消</p>
<blockquote>
<p>1.选中的为父节点，将所有的子节点取消选中<br>取消选中的方法<code>$(&#39;#tree&#39;).treeview(&#39;uncheckNode&#39;, [ nodeId, { silent: true } ]);</code></p>
<p>2选中的为子节点，判断父节点中的子节点是否选中 如果选中 则取消选中</p>
</blockquote>
<p>判断是否选中的方法</p>
<blockquote>
<p><code>$(&#39;#tree&#39;).treeview(&#39;selectNode&#39;, [ nodeId, { silent: true } ]);</code><br>根据获取到元素获取是否选中</p>
</blockquote>
<hr>
<h6 id="实现功能四（维护template数据）"><a href="#实现功能四（维护template数据）" class="headerlink" title="实现功能四（维护template数据）"></a>实现功能四（维护template数据）</h6><blockquote>
<p>1.正在编辑的editingTemplate<br>2.当前层级选中的所有selectedNodeId<br>3.展示需要的字符串数组selectedNodeName<br>3.存储字符串数组selectedAreaId对应数据库中的areaId<br>4.将上面的三个数组存入template，并将template push进入templates</p>
</blockquote>
<p>逻辑</p>
<blockquote>
<p>1.获取到所有的被选中的元素<br>2.遍历所有的元素 判断当前节点是否有nodes（即子元素），如果有则直接操作，并改变index，将其子元素全部跳过，将节点名称保存进areaNames，如”安徽”<br>3.遍历所有的元素 如果没有子元素，取出父级元素如”北京(“,将node元素添加至后面，如”北京(昌平区”,判断下一个元素的父节点是否发生改变，如果发生改变则结束维护字符串为”北京（昌平区）”，并将其添加至areaNames，继续遍历下一个节点<br>4.其他三个数组在遍历的同时维护</p>
</blockquote>
<hr>
<h6 id="实现结果展示："><a href="#实现结果展示：" class="headerlink" title="实现结果展示："></a>实现结果展示：</h6><p>1.主页面展示：<br><img src="http://upload-images.jianshu.io/upload_images/1329783-9384c647d523f55c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="主页面"><br>2.tree展示：<br><img src="http://upload-images.jianshu.io/upload_images/1329783-e791fb21521652f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/540" alt="选择地区.png"></p>
<hr>
<h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6><blockquote>
<p>本文提供简单的实现方案思路，具体的代码根据业务实现，不足之处不能动态处理数据源，优点bootstrap开放的api接口较多，可自定义实现。</p>
<p>未经作者允许 请勿转载，谢谢 :) </p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://SeeMoonUp.github.io/2017/01/20/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[About Me]]></title>
      <url>http://SeeMoonUp.github.io/2017/01/20/about/</url>
      <content type="html"><![CDATA[<blockquote>
<p>我的名字</p>
</blockquote>
<p>李蒙</p>
<blockquote>
<p>简介</p>
</blockquote>
<p>喜上红楼</p>
<p>爱住西厢</p>
<blockquote>
<p>最近痴迷的语句</p>
</blockquote>
<p>撇下半天风韵 拾得万种思量</p>
<blockquote>
<p>程序员</p>
</blockquote>
<p>java</p>
]]></content>
    </entry>
    
  
  
</search>
